

























## 01

1. 데이터베이스 시스템 구성
2. 데이터베이스 계정 관리
3. 관계형, NoSQL 데이터베이스 도입
4. 데이터베이스 작업 흐름
- 데이터베이스, 테이블만들때 실수 안하기 위해


1. 데이터베이스를 영역에 따라 별도로 설치

로컬영역 (개발자 pc -> 로컬 db)
개발 영역 (개발자 pc -> 개발 db)
서비스 영역 (개발자 pc -> 서비스 DB) <- 이거는 직접 접근하면 안된다.

local
develop
production


db를 역할에 따라 구성

Read only
Write only

2. 데이터베이스 계정 관리

사용 목적에 따라 계정 관리
db관리자 : 설정, 권한, 읽기, 쓰기
어플리케이션 : 읽기, 쓰기
개발자 : 읽기

처음엔 RDB로 하고 특수 목적이 필요하면 NoSQL 도입


db 실수 -> 고객 서비스 장애

db 작업 흐름

데이터 정의어 작업
-> 수작업 줄이고 자동화를 적극적으로 도입

데이터 조작어
- 동료나, DBA 리뷰 받아야.
- 쿼리의 인덱스 사용여부 확인 필수


db 는 절대 로컬, dev에서 접근 및 작업금지



보니까 뭐 구현 관련 내용은 거의 없네?

## 02

안정성과 확장성 있는 테이블 관리

1. 관례를 만들고 지킨다.

db 테이블에 대해 관례가 없다면 만든다.

데이터 베이스 이름
테이블 이름
컬럼 이름
컬럼 데이터 형
인덱스 이름


소문자, 언더바, 숫자로 

테이블 이름은 복수형으로 적는다.

컬럼 이름 관례

도 동일하지만 복수형은 아님

참거짓 -> is 어쩌구
날짜는 xxx_at
생성자, 수정자 관련 컬럼 xxxx_by
(생성, 수정한 사람의 컬럼이름 끝)

인덱스 이름

소문자 언더바 숫자

테이블명_idx_숫자
테이블명_index_숫자

products_index_01



#컬럼에 주석을 꼭 달아둔다.

왜 있는가.
테이블을 초기 생성할때
테이블에 컬럼 추가할때

필수적으로 꼭 만들어야 하는 필수 컬럼
(테이블 이력, 추적, 증분, 복제 등의 용도)

생성한 사람 또는 시스템 (created_by)
생성한 시간 (created_at)
수정한 사람 또는 시스템 (updated_by)
updated_at


확장성을 위한 테이블 관계 설정
- 초기 설계 -> 서비스 및 사업 확장을 따라가지 못함.
- 테이블끼리 초기부터 FK로 서로 연결은 추천 안한다.
- 어플리케이션에서 id를 기반으로 관계 조회.

# 테이블 데이터 물리적 삭제하지 않는다.

기본적으로 소프트 삭제를 한다.

데이터 유실, 동기화 깨짐 등의 부수 효과 발생

is_deleted 를 써라.




















