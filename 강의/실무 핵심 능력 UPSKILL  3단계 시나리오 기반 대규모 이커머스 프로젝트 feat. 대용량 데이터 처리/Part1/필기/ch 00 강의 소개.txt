


part 1 : 스타트업 초기 개발. 초기 서비스를 개발할 때 필요한 것들을 알아보기

part 2 : 스타트업 성장 단계. 런칭한 서비스를 운영하면서 추가적인 서비스를 개발하기

part 3 : 대규모 서비스 도약 단계. 행복한 고민. 고객들이 많아지면서 겪는 어려움을 극복하기



작은 서비스 -> 큰 서비스


앱, 벡엔드, 테크 리더


1. 기본이 중요하다. 아무리 복잡해도 되돌아ㅗ바야
2. 은총알은 없다. 모든거 한번에 안됨.
3. 관례 : 수많은 동료개발자들의 경험은 중요하다...
4. why : 솔루션이나 도구 선택에 생각해야 함.


파트 1 스타트업 초기 서비스 개발

- 이커머스 아이디어 기획 및 구현 {아마도 아이템 찾고, 온라인 화 하는 과정을 찾고 하는것들?}
- 이커머스 데이터 저장소 설계 및 관리 {RDB나 S3나 EFS나 MQ나 NoSQL}
- 이커머스 서비스 어드민 만들기 {아... 이게 우선이야? 컨트롤을 먼저 만들고 시작하네... 에자일을 떠올리면 고객서비스 먼저 만들고 시작이라고 생각했는데}
- 이커머스 서비스 만들기 {서비스 개발}
- 이커머스 서비스 기본 지표 만들기 {추적하기 위한 지표}
- ABTest 도입하기
#로깅 모니터링 알림...
- 이커머스 서비스 로깅
- 이커머스 서비스 모니터링 구축
- 이커머스 서비스 알람 구축


파트 2. 스타트업 성장 단계

서비스 런칭 이후 필요한 것들

실제 빅테크에서 쓰는 것들

- 개발 코드 유지보수성
- 시스템 서버를 영역으로 분리???  AZ같은건가? 아니면 dev, staging, prod같은것?
- REST API 서버 & 관리
- 배치 서비스 만들기?
- github action => 그치... 이거 쓰면서 내 젠킨스 스택은 다 날아가는거지... 제대로 써보지도 못하고
- AWS 에 api 서버 배포 <- 사실 EKS 쓰면 istio나 api server에 해당하는 SW로 대체 가능함.
- 데이터베이스 확장성
- 서비스 장애 대응하기

작은서비스 -> 큰서비스 성장에 필수


파트 3. 대규모 서비스 도약 단계

- 이커머스 워크플로 정리 및 확장성 높이기
- 도메인 단위로 분리 {아 이게 이때야?}
- API Gateway 도입
- GraphQL 도입
- Pinpoint 도입
- Kafka 메세징 플랫폼 도입
- 검색 솔루션 도입
- 이커머스 서비스 로깅
- airflow 데이터 워크플로 도입
- 자신의 서비스 안정성, 확장성 점검


단일 시스템 -> 수많은 고객들 트레픽 분산 불가

분산 시스템, 모니터링



실습 주제 도구 사용 아이디어 시각화

notion, lucid 차트
마크다운 형태임.


강사님은 이 두가지를 매일매일 동료들과 사용함.




모든 서비스 -> 데이터 저장소 필요.

관계형 데이터베이스


이커머스 -> 운영자 사이트 관리자 혹은 어드민 혹은 백오피스 라고 부름

springboot로 만들거임.

웹프레임워크와 관계형 데이터베이스


서비스와 사업이 잘 운영되는지 매일 분석해야 함.
통계나, 숫자 => 사업지표, 서비스 지표, 핵심 지표라고 함.

매일 분석하기 쉬우려면 시각화 해야 함.

현장 => 대시보드

예시에서 간단한 관리자 대시보드 만들 것.


신규 기능 바로 배포 안함.


기존 기능 : A안
신 기능 : B안

로깅 -> 디버깅 할때 필요.

팀에서 정한 관례대로 남겨야 함.

시스템, 서비스 모니터링

서비스 이상 발생 -> 가장 많이 쓰는 알람은 슬랙임.


스타트업 성장 단계

고객 서비스 오픈 -> 안정성, 운영의 어려움, 확장성


처음엔 단일 서버, 단일 시스템으로 가능

복잡성, 유지보수성이 떨어짐.


단일 시스템 -> 프론트엔드, 백엔드로 어캐 분리하나.

springboot api 만듦
기존 frontend와 backend로 결합된 시스템을 분리
기존 이커머스 서비스가 신규 api 서비스를 사용하도록 변경
기존 이커머스 서비스의 사용하지 않는 코드를 제거한다.

특정 스케줄과 일정에 따라 업무를 모아서 처리
이를 배치 시스템이라고 함.

스프링 배치임 현장에서 제일 많이 씀.



대규모 서비스 도약
서비스 더 커지면 문제 생김
하나의 솔루션 하나의 기술로 해결 불가능함.
다양한 솔루션의 조합으로 문제 극복 가능

대규모 서비스란? -> 수많은 서버, 그 위에 돌아가는 수많은 서비스
-> 수많은 개발자.
매초, 매분, 매시간 엄청난 양의 소스코드를 작성함.
=> 주요한 것 : 코드 품질 유지

빠르게 서비스를 개발하고 런칭하게 되면 코드는 그때부터 유지보수서잉 떨어지게 됨.
코드를 작성할 때 최소한의 clean code 가이드를 따른다면,
개발이 사업의 속도를 맞추지 못하는 일이 적을 것

유지보수성 높이는 방법, unit 테스트

배포하기

개발자들은 어떻게 테스트 하고 배포할까?
local, dev, stage, production

각 영역에 맞게 프로파일로 구분함.

처음 서비스 개발 -> 클라이언트 

시스템 요구에 맞게 분리 분산
-> 복잡도 낮추고 다양하게 확장

코드레벨과 데이터베이스 관점에서 읽기와 쓰기를 어떻게 나눌 수 있나

고객이 많으면 단일 서버, 단일 시스템 안됨
=> 시스템 분산을 해줘야 함.

어떤 기준으로 시스템을 분리 분산 시켜야 함.

DDD와 이벤트 스토밍에 대해서 

대규모 시스템 분산 -> 수많은 API가 생성됨.
관리 -> API Gateway

그치... 이게 어떤 셋팅을 하냐에 따라서 진짜 천차 만별임.
spring cloud gateway로도 가능하고,
aws api gateway 처럼 클라우스 서비스로도 가능하고
k8s 쓰고 있으면, istio로 대체 가능하고,
혹은 k8s 내에서 api gateway open source 종류가 굉장히 많음. kong 같은거


spring cloud gateway

이렇게 분산된 api 끼리는 http 프로토콜을 통해 통신한다.
grpc가 더 최신임.

시스템이 많아지면 이를 관리하고 통제하기 위해 api 게이트웨이가 필요함.


graphQL
api가 많으면 유지보수에 어려움

api 제공에 sql 처럼 사용 가능한 graphQL


성능과 이슈 관리
pinpoint

전통적인 http 말고도 메세지 송수신 방식도 씀

kafka => 어떻게 분산된 시스템 끼리 메세지를 주고 받나

우리는 실제 서비스 현장에서 사용되고 있는 것을 배운다.

 



























































