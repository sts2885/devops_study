apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: conditional-execution-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.19, pipelines.kubeflow.org/pipeline_compilation_time: '2023-07-08T14:33:45.791155',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Show how to use dsl.Condition().",
      "name": "Conditional execution pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.19}
spec:
  entrypoint: conditional-execution-pipeline
  templates:
  - name: condition-1
    inputs:
      parameters:
      - {name: get-random-int-op-Output}
    dag:
      tasks:
      - name: process-small-op
        template: process-small-op
        arguments:
          parameters:
          - {name: get-random-int-op-Output, value: '{{inputs.parameters.get-random-int-op-Output}}'}
  - name: condition-2
    inputs:
      parameters:
      - {name: get-random-int-op-Output}
    dag:
      tasks:
      - name: process-medium-op
        template: process-medium-op
        arguments:
          parameters:
          - {name: get-random-int-op-Output, value: '{{inputs.parameters.get-random-int-op-Output}}'}
  - name: condition-3
    inputs:
      parameters:
      - {name: get-random-int-op-Output}
    dag:
      tasks:
      - name: process-large-op
        template: process-large-op
        arguments:
          parameters:
          - {name: get-random-int-op-Output, value: '{{inputs.parameters.get-random-int-op-Output}}'}
  - name: conditional-execution-pipeline
    dag:
      tasks:
      - name: condition-1
        template: condition-1
        when: '{{tasks.get-random-int-op.outputs.parameters.get-random-int-op-Output}}
          < 10'
        dependencies: [get-random-int-op]
        arguments:
          parameters:
          - {name: get-random-int-op-Output, value: '{{tasks.get-random-int-op.outputs.parameters.get-random-int-op-Output}}'}
      - name: condition-2
        template: condition-2
        when: '{{tasks.get-random-int-op.outputs.parameters.get-random-int-op-Output}}
          < 50'
        dependencies: [get-random-int-op]
        arguments:
          parameters:
          - {name: get-random-int-op-Output, value: '{{tasks.get-random-int-op.outputs.parameters.get-random-int-op-Output}}'}
      - name: condition-3
        template: condition-3
        when: '{{tasks.get-random-int-op.outputs.parameters.get-random-int-op-Output}}
          > 50'
        dependencies: [get-random-int-op]
        arguments:
          parameters:
          - {name: get-random-int-op-Output, value: '{{tasks.get-random-int-op.outputs.parameters.get-random-int-op-Output}}'}
      - {name: get-random-int-op, template: get-random-int-op}
  - name: get-random-int-op
    container:
      args: [--minimum, '0', --maximum, '100', '----output-paths', /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "def get_random_int_op(minimum, maximum):\n    \"\"\"\uB09C\uC218 \uC0DD\uC131\
        \ => minimum ~ maximum \uC0AC\uC774\uC758 \uAC12(\uC774\uC0C1,\uC774\uD558\
        )\"\"\"\n    import random #\uC774 \uC548\uC5D0 \uB123\uC5B4\uC57C \uCEE8\uD14C\
        \uC774\uB108 \uC548\uC5D0 \uB4E4\uC5B4\uAC04\uB2E4.\n    result = random.randint(minimum,\
        \ maximum)\n    print(result)\n    return result\n\ndef _serialize_int(int_value:\
        \ int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n\
        \    if not isinstance(int_value, int):\n        raise TypeError('Value \"\
        {}\" has type \"{}\" instead of int.'.format(\n            str(int_value),\
        \ str(type(int_value))))\n    return str(int_value)\n\nimport argparse\n_parser\
        \ = argparse.ArgumentParser(prog='Get random int op', description='\uB09C\uC218\
        \ \uC0DD\uC131 => minimum ~ maximum \uC0AC\uC774\uC758 \uAC12(\uC774\uC0C1\
        ,\uC774\uD558)')\n_parser.add_argument(\"--minimum\", dest=\"minimum\", type=int,\
        \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--maximum\"\
        , dest=\"maximum\", type=int, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str,\
        \ nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"\
        _output_paths\", [])\n\n_outputs = get_random_int_op(**_parsed_args)\n\n_outputs\
        \ = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport\
        \ os\nfor idx, output_file in enumerate(_output_files):\n    try:\n      \
        \  os.makedirs(os.path.dirname(output_file))\n    except OSError:\n      \
        \  pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
      image: python:3.7
    outputs:
      parameters:
      - name: get-random-int-op-Output
        valueFrom: {path: /tmp/outputs/Output/data}
      artifacts:
      - {name: get-random-int-op-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.19
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "\ub09c\uc218
          \uc0dd\uc131 => minimum ~ maximum \uc0ac\uc774\uc758 \uac12(\uc774\uc0c1,\uc774\ud558)",
          "implementation": {"container": {"args": ["--minimum", {"inputValue": "minimum"},
          "--maximum", {"inputValue": "maximum"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          get_random_int_op(minimum, maximum):\n    \"\"\"\ub09c\uc218 \uc0dd\uc131
          => minimum ~ maximum \uc0ac\uc774\uc758 \uac12(\uc774\uc0c1,\uc774\ud558)\"\"\"\n    import
          random #\uc774 \uc548\uc5d0 \ub123\uc5b4\uc57c \ucee8\ud14c\uc774\ub108
          \uc548\uc5d0 \ub4e4\uc5b4\uac04\ub2e4.\n    result = random.randint(minimum,
          maximum)\n    print(result)\n    return result\n\ndef _serialize_int(int_value:
          int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if
          not isinstance(int_value, int):\n        raise TypeError(''Value \"{}\"
          has type \"{}\" instead of int.''.format(\n            str(int_value), str(type(int_value))))\n    return
          str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Get
          random int op'', description=''\ub09c\uc218 \uc0dd\uc131 => minimum ~ maximum
          \uc0ac\uc774\uc758 \uac12(\uc774\uc0c1,\uc774\ud558)'')\n_parser.add_argument(\"--minimum\",
          dest=\"minimum\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--maximum\",
          dest=\"maximum\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = get_random_int_op(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "minimum", "type": "Integer"},
          {"name": "maximum", "type": "Integer"}], "name": "Get random int op", "outputs":
          [{"name": "Output", "type": "Integer"}]}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"maximum": "100", "minimum":
          "0"}'}
  - name: process-large-op
    container:
      args: [--data, '{{inputs.parameters.get-random-int-op-Output}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def process_large_op(data):
            print("high", data)
            return

        import argparse
        _parser = argparse.ArgumentParser(prog='Process large op', description='')
        _parser.add_argument("--data", dest="data", type=int, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = process_large_op(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: get-random-int-op-Output}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.19
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--data", {"inputValue": "data"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def process_large_op(data):\n    print(\"high\", data)\n    return\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Process large op'', description='''')\n_parser.add_argument(\"--data\",
          dest=\"data\", type=int, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = process_large_op(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "data", "type": "Integer"}],
          "name": "Process large op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"data": "{{inputs.parameters.get-random-int-op-Output}}"}'}
  - name: process-medium-op
    container:
      args: [--data, '{{inputs.parameters.get-random-int-op-Output}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def process_medium_op(data):
            print("medium result", data)
            return

        import argparse
        _parser = argparse.ArgumentParser(prog='Process medium op', description='')
        _parser.add_argument("--data", dest="data", type=int, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())

        _outputs = process_medium_op(**_parsed_args)
      image: python:3.7
    inputs:
      parameters:
      - {name: get-random-int-op-Output}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.19
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--data", {"inputValue": "data"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def process_medium_op(data):\n    print(\"medium result\", data)\n    return\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Process medium op'',
          description='''')\n_parser.add_argument(\"--data\", dest=\"data\", type=int,
          required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
          = process_medium_op(**_parsed_args)\n"], "image": "python:3.7"}}, "inputs":
          [{"name": "data", "type": "Integer"}], "name": "Process medium op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"data": "{{inputs.parameters.get-random-int-op-Output}}"}'}
  - name: process-small-op
    container:
      args: [--data, '{{inputs.parameters.get-random-int-op-Output}}']
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - "def process_small_op(data):\n    \"\"\"\uC791\uC740 \uC22B\uC790\uB4E4\uC744\
        \ process\uD574\uB77C\"\"\"\n    print(\"processing small result\", data)\n\
        \    return\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Process\
        \ small op', description='\uC791\uC740 \uC22B\uC790\uB4E4\uC744 process\uD574\
        \uB77C')\n_parser.add_argument(\"--data\", dest=\"data\", type=int, required=True,\
        \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n\
        _outputs = process_small_op(**_parsed_args)\n"
      image: python:3.7
    inputs:
      parameters:
      - {name: get-random-int-op-Output}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.19
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "\uc791\uc740
          \uc22b\uc790\ub4e4\uc744 process\ud574\ub77c", "implementation": {"container":
          {"args": ["--data", {"inputValue": "data"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
          \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
          "def process_small_op(data):\n    \"\"\"\uc791\uc740 \uc22b\uc790\ub4e4\uc744
          process\ud574\ub77c\"\"\"\n    print(\"processing small result\", data)\n    return\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Process small op'', description=''\uc791\uc740
          \uc22b\uc790\ub4e4\uc744 process\ud574\ub77c'')\n_parser.add_argument(\"--data\",
          dest=\"data\", type=int, required=True, default=argparse.SUPPRESS)\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = process_small_op(**_parsed_args)\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "data", "type": "Integer"}],
          "name": "Process small op"}', pipelines.kubeflow.org/component_ref: '{}',
        pipelines.kubeflow.org/arguments.parameters: '{"data": "{{inputs.parameters.get-random-int-op-Output}}"}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
